import requests
from .secret_keys import TASTEDIVE_KEY, OMDB_KEY


# Movie Recommendation Functions
def get_movies_from_tastedive(item_name):
    """Retrieves similar movies from tastedive

    :param item_name:
    :return: A dictionary from the json for the tastedive results
    """
    base_url = 'https://tastedive.com/api/similar'
    parameters = {'q': item_name, 'type': 'movies', 'limit': '5', 'k': TASTEDIVE_KEY}
    resp = requests.get(base_url, params=parameters)
    results = resp.json()
    return results


def extract_movie_titles(results_dictionary):
    """Gives a list of names of movies

    :param results_dictionary: Takes the dictionary from get_movies_from_tastedive
    :return: Returns a list of the names of the movies that were retrieved from tastedive
    """
    return [result['Name'] for result in results_dictionary['Similar']['Results']]


def get_related_titles(list_of_movies):
    """Gets the related movies to each of a list of movies

    :param list_of_movies: A list of movies to search for related movies
    :return temp_list: Returns a list of unique names for related movies
    """
    temp_list = []
    for movie in list_of_movies:
        temp_results = get_movies_from_tastedive(movie)
        names = extract_movie_titles(temp_results)
        for name in names:
            if name not in temp_list:
                temp_list.append(name)
    print(temp_list)
    return temp_list


def get_movie_data(title):
    """Gets movie data from OMDB

    :param title: A movie title
    :return results: A dictionary from JSON of all information about a movie on OMDB
    """
    base_url = 'http://www.omdbapi.com/'
    paramaters = {'t': title, 'r': 'json', 'apikey': OMDB_KEY}
    resp = requests.get(base_url, params=paramaters)
    results = resp.json()
    return results


def get_movie_rating(results_dict):
    """Gets rotten tomatoes rating for a movie

    :param results_dict: Takes the JSON dictionary from get_movie_data
    :return score: Returns the Rotten Tomatoes score for a movie title (or zero if the score is not found)
    """
    for rating_dict in results_dict['Ratings']:
        if rating_dict['Source'] == 'Rotten Tomatoes':
            rt_score = rating_dict['Value'].strip('%')
            return int(rt_score)
    return 0


def sorter(item):
    """Key for sorting the movies by rating

    :param item: A movie entry of a dictionary
    :return: Returns the rating
    """
    global movies_rated
    if movies_rated[item] == 0:
        return 0
    else:
        return movies_rated[item]


def get_sorted_recommendations(movie_list):
    """Combines the above functions to get a sorted list of movies

    :param movie_list: A list of movie titles
    :return: Returns a list of movies sorted by RT rating
    """
    global movies_rated
    movies_rated = {}
    related_movies = get_related_titles(movie_list)
    for movie in related_movies:
        rating = get_movie_rating(get_movie_data(movie))
        movies_rated[movie] = rating
    sorted_movies = list(sorted(movies_rated, key=lambda movie: (sorter(movie), ord(movie[0])), reverse=True))
    return sorted_movies
