'''A simple program that allows users to create an account, log on and get movie recommendations through
TasteDive and OMDB
'''
from tkinter import (Tk,
                     Frame,
                     Label,
                     Message,
                     Entry,
                     Button,
                     Checkbutton,
                     END,
                     mainloop,
                     Toplevel,
                     IntVar,
                     )
import sqlite3
import requests
import bcrypt
from packages.secret_keys import OMDB_KEY, TASTEDIVE_KEY
from packages.movie_functions import (get_movies_from_tastedive,
                                       extract_movie_titles,
                                       get_related_titles,
                                       get_movie_data,
                                       get_movie_rating,
                                       sorter,
                                       get_sorted_recommendations,
                                       )


conn = sqlite3.connect('logins.sqlite')
cur = conn.cursor()
logged_on = None
admin = None


cur.execute("""CREATE TABLE IF NOT EXISTS Logins (id INTEGER, username TEXT NOT NULL UNIQUE, password TEXT NOT NULL, 
admin INTEGER, movies TEXT, PRIMARY KEY("id" AUTOINCREMENT))""")

root = Tk()
logon_screen = Frame(root)
movie_screen = Frame(root)
logon_screen.pack()

root.title('Log on')
root.geometry('600x400')


# Account Functions
def confirm_registration(event=None):
    """Confirms an account is valid as the user wishes to register it

    Gets the input of the user and compares it to existing usernames and checks that the passwords are the same.
    :name: The username the user is attempting to register
    :passw: The password the user is going to use
    :passw_double: Verification password
    """
    name = uname.get()
    passw = pw.get()
    passw_double = pw_double.get()
    cur.execute('SELECT username FROM Logins WHERE username=?', (name,))
    # Testing if the username is taken
    try:
        row = cur.fetchone()
        exist = row[0]
        name_exists = Label(top, text='Username already exists!')
        name_exists.grid(row=5, column=0, columnspan=2)
        return
    except:
        pass
    # Checking that the passwords equal each other
    if passw != passw_double:
        pw_not_equal = Label(top, text='Passwords were not the same')
        pw_not_equal.grid(row=6, column=0, columnspan=2)
        return
    # Salting and hashing the password to store
    salt = bcrypt.gensalt(rounds=16)
    hashed = bcrypt.hashpw(passw.encode(), salt)
    cur.execute('INSERT INTO Logins (username, password, admin) VALUES (?, ?, 0)', (name, hashed))
    conn.commit()
    registration_success = Label(logon_screen, text='Registration success! Now log on.').pack()
    top.destroy()


def logon(event=None):
    """Accesses the database 'logins.sqlite' to authenticate username and password.

    Will delete entries and return a success or error statement except for when a correct username
    is given and no password is input - in this case it will retain the username and return an error message.

    :username: The username selected from the entry box
    :row: The database search for the username or password
    :name: The database username, if found
    :authentication: The database password for said username, if found
    """
    global logged_on
    global person
    global mov_list
    global success
    username = username_entry.get()
    cur.execute('SELECT username FROM Logins WHERE username=?', (username,))
    try:
        # Get the username from the database (if it exists)
        row = cur.fetchone()
        name = row[0]
    except:
        error = Label(logon_screen, text='Username not found!').pack()
        username_entry.delete(0, END)
        password_entry.delete(0, END)
        return
    password = password_entry.get()
    if len(password) < 1:
        error = Label(logon_screen, text='Please input your password!').pack()
        return
    cur.execute('SELECT password FROM Logins WHERE username=?', (name,))
    try:
        # Gets the password for that account
        row = cur.fetchone()
        authentication = row[0]
    except:
        error = Label(logon_screen, text='Password not found! Please contact an administrator').pack()
        username_entry.delete(0, END)
        password_entry.delete(0, END)
        return
    # Checking the input password with the hashed password
    if bcrypt.checkpw(password.encode(), authentication):
        logged_on = True
    else:
        error = Label(logon_screen, text='Wrong password!').pack()
        password_entry.delete(0, END)
        return
    success = Label(logon_screen, text='Logged on!').pack()
    username_entry.delete(0, END)
    password_entry.delete(0, END)

    # Get the name associated with this account
    person = str(username)
    logon_screen.pack_forget()

    # Reset root title
    root.title('Get Movie Recommendations!')

    # Get the movies already associated with this login
    cur.execute('''SELECT movies FROM Logins WHERE username=?''', (person,))
    row = cur.fetchone()
    movies = str(row[0])
    try:
        mov_list = row[0].split('|')
    except AttributeError:
        mov_list = []
    existing_movies = Message(movie_screen, text=movies, width=250)
    existing_movies.grid(row=1, column=0, columnspan=2)

    # Pack the new frame
    movie_screen.pack()


def register():
    """Opens a new window to register a new account.

    :top: New window
    :uname: Username to be registered
    :pw: Password to be associated with said username
    :pw_double: Password checking
    """
    global top
    global uname
    global pw
    global pw_double
    top = Toplevel()
    top.bind('<Return>', confirm_registration)
    top.title('Register an account')
    top.geometry('400x400')
    # Entry boxes
    uname = Entry(top)
    uname.grid(row=0, column=1)
    pw = Entry(top, show='*')
    pw.grid(row=1, column=1)
    pw_double = Entry(top, show='*')
    pw_double.grid(row=2, column=1)

    # Labels
    uname_label = Label(top, text='Enter a username')
    uname_label.grid(row=0, column=0)
    pass_label = Label(top, text='Enter a password')
    pass_label.grid(row=1, column=0)
    password_double_label = Label(top, text='Re-enter your password')
    password_double_label.grid(row=2, column=0)

    # Buttons
    confirm_button = Button(top, text='Register now', command=confirm_registration)
    confirm_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10, ipadx=137)
    exit_button = Button(top, text='Cancel', command=top.destroy)
    exit_button.grid(row=4, column=0, columnspan=2, padx=10, pady=10, ipadx=100)


def logoff():
    """Logs the user off and returns them to the logon screen

    """
    global logged_on
    movie_screen.pack_forget()
    logon_screen.pack()
    logged_on = False


def get_recs():
    """Uses the functions in movie_functions.py to get a list of sorted recommendations based on past
    movies and the entered movies.

    """
    global movies
    # Reset the label if the user already asked for recommendations in this session
    try:
        recommendation_label.grid_forget()
    except:
        pass
    new_movies = movie_add_entry.get()
    new_mov_list = new_movies.split('|')
    for movie in new_mov_list:
        mov_list.append(movie)
    if history.get() == 1:
        print("Checked")
        movies = get_sorted_recommendations(new_mov_list)
    else:
        print("Not checked")
        movies = get_sorted_recommendations(mov_list)
    movie_string = ''
    # Following code will not work if all 7 of the movies are in the mov_list
    for movie in movies[:7]:
        if movie in mov_list:
            continue
        else:
            movie_string += movie
            if movie != movies[6]:
                movie_string += ', '
    recommendation_label = Message(movie_screen, text=movie_string, width=300)
    recommendation_label.grid(row=8, column=0, columnspan=2)
    movie_add_entry.delete(0, END)
    cur.execute('''UPDATE Logins SET movies=? WHERE username=?''', ('|'.join(mov_list), person))


# The logon labels and entry boxes
username_label = Label(logon_screen, text='Username:').pack()
username_entry = Entry(logon_screen)
username_entry.pack()
password_label = Label(logon_screen, text='Password:').pack()
password_entry = Entry(logon_screen, show='*')
password_entry.pack()

# The buttons to logon or register an account
root.bind('<Return>', logon)
logon_button = Button(logon_screen, text='Log on', command=logon).pack()
register_button = Button(logon_screen, text='Register for an= account', command=register).pack()
close_button = Button(logon_screen, text='Exit Program', command=root.destroy).pack()

# Labels and entries for the movie screen
existing_movies_label = Label(movie_screen, text='We found these movies in your history:')
existing_movies_label.grid(row=0, column=0, columnspan=2)
movie_add_label = Label(movie_screen, text="Enter a few movies here! We'll find some some movies to suggest.")
movie_add_label.grid(row=2, column=0, columnspan=2)
movie_add_note = Label(movie_screen, text='Please separate all movie titles with a comma.')
movie_add_note.grid(row=3, column=0, columnspan=2)
movie_add_entry = Entry(movie_screen)
movie_add_entry.grid(row=4, column=0, columnspan=2, ipadx=100)
movie_history_label = Label(movie_screen, text='Click here to NOT use the movies in your history during this search: ')
movie_history_label.grid(row=5, column=0)
history = IntVar()
movie_history_check = Checkbutton(movie_screen, text='', variable=history)
movie_history_check.grid(row=5, column=1)

# Button for movie screen
movie_button = Button(movie_screen, text='Get recommendations!', command=get_recs)
movie_button.grid(row=6, column=0, columnspan=2)
logoff_button = Button(movie_screen, text='Logoff', command=logoff)
logoff_button.grid(row=7, column=0, columnspan=2)


mainloop()

conn.commit()
conn.close()
